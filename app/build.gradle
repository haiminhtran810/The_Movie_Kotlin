apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 26
    flavorDimensions "default"
    defaultConfig {
        multiDexEnabled true
        applicationId "vn.home.app.themoviekotlin"
        minSdkVersion 21
        targetSdkVersion 26
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        //https://developer.android.com/studio/build/shrink-code
        //To enable code shrinking with ProGuard, add minifyEnabled true to the appropriate build type in your build.gradle file.
        release {
            buildConfigField "boolean", "MOCK_DATA", "false"
            // xuất ra lỗi
            debuggable false
            // tối ưu hóa
            // Shrink your code
            //Be aware that code shrinking slows down the build time
            minifyEnabled true
            // mã hóa
            useProguard true
            // Tối giản res
            //Resource shrinking is available with the Android plugin for Gradle,
            // which removes unused resources from your packaged app, including unused resources in code libraries
            shrinkResources = true
            // the proguardFiles property specifies the following ProGuard rules
            //Tip: For even more code shrinking, try the proguard-android-optimize.txt file located in the same directory.
            // It includes the same ProGuard rules, but with other optimizations that perform analysis at the bytecode level—inside and across methods—to reduce your APK size further and help it run faster.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        mock {
            buildConfigField "boolean", "MOCK_DATA", "true"
            // xuất ra lỗi
            debuggable true
            // tối ưu hóa
            useProguard false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField "boolean", "MOCK_DATA", "false"
            // xuất ra lỗi
            debuggable true
            useProguard false
            // tối ưu hóa
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        /*
        có thẻ sử dụng cho code
        if (BuildConfig.enableDebugLogging) {
            Log.d(TAG, "Debug message here");
        }*/
    }
    buildToolsVersion '27.0.3'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    productFlavors {
        dev {
            versionCode rootProject.ext.versionCode_dev
            versionName rootProject.ext.versionName_dev
            applicationIdSuffix = ".dev"
            // app name của ứng dụng
            resValue "string", "app_name", "Movie DB DEV"
        }
        prd {
            versionCode rootProject.ext.versionCode_product
            versionName rootProject.ext.versionName_product
            applicationIdSuffix = ".prd"
            // app name của ứng dụng
            resValue "string", "app_name", "Movie DB PRD"
        }
        stg {
            versionCode rootProject.ext.versionCode_dev
            versionName rootProject.ext.versionName_dev
            // khi build sẽ gán và đuôi của applicationId
            applicationIdSuffix = ".stg"
            // app name của ứng dụng
            resValue "string", "app_name", "Movie DB STG"
        }
    }

    dataBinding {
        enabled = true
    }

    applicationVariants.all { variant ->
        def BASE_URL = "https://api.themoviedb.org/"
        def API_KEY = "5fc3a402d4d344ccbb0b1b0f001fc992"
        def SMALL_IMAGE_URL = "https://image.tmdb.org/t/p/w200"
        def LARGE_IMAGE_URL = "https://image.tmdb.org/t/p/w500"
        def ORIGINAL_IMAGE_URL = "https://image.tmdb.org/t/p/original"
        

        variant.buildConfigField "String", "BASE_URL", "\"${BASE_URL}\""
        variant.buildConfigField "String", "TMBD_API_KEY", "\"${API_KEY}\""
        variant.buildConfigField "String", "SMALL_IMAGE_URL", "\"${SMALL_IMAGE_URL}\""
        variant.buildConfigField "String", "LARGE_IMAGE_URL", "\"${LARGE_IMAGE_URL}\""
        variant.buildConfigField "String", "ORIGINAL_IMAGE_URL", "\"${ORIGINAL_IMAGE_URL}\""
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "com.android.support:appcompat-v7:$version_sp"
    implementation "com.android.support:support-v4:$version_sp"
    implementation "com.android.support:recyclerview-v7:27.1.1"
    implementation "com.android.support:cardview-v7:27.1.1"
    implementation "com.android.support:design:27.1.1"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    // dagger 2
    implementation 'com.google.dagger:dagger:2.17'
    kapt "com.google.dagger:dagger-compiler:2.17"

    // dagger 2 android
    implementation "com.google.dagger:dagger-android:2.17"
    implementation "com.google.dagger:dagger-android-support:2.17"
    kapt "com.google.dagger:dagger-android-processor:2.17"

    // retrofit

    // rxjava
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.2'

    // viewmodel - lifecycle
    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"
    // alternatively - just ViewModel
    implementation "android.arch.lifecycle:viewmodel:$lifecycle_version" // use -ktx for Kotlin
    // alternatively - just LiveData
    implementation "android.arch.lifecycle:livedata:$lifecycle_version"
    // alternatively - Lifecycles only (no ViewModel or LiveData).
    //     Support library depends on this lightweight import
    implementation "android.arch.lifecycle:runtime:$lifecycle_version"

    annotationProcessor "android.arch.lifecycle:compiler:$lifecycle_version" // use kapt for Kotlin
    // alternately - if using Java8, use the following instead of compiler
    implementation "android.arch.lifecycle:common-java8:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    implementation "android.arch.lifecycle:reactivestreams:$lifecycle_version"

    // optional - Test helpers for LiveData
    testImplementation "android.arch.core:core-testing:$lifecycle_version"
}